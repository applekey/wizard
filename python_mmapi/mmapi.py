# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mmapi', [dirname(__file__)])
        except ImportError:
            import _mmapi
            return _mmapi
        if fp is not None:
            try:
                _mod = imp.load_module('_mmapi', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mmapi = swig_import_helper()
    del swig_import_helper
else:
    import _mmapi
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mmapi.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _mmapi.SwigPyIterator_value(self)
    def incr(self, n=1): return _mmapi.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _mmapi.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _mmapi.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _mmapi.SwigPyIterator_equal(self, *args)
    def copy(self): return _mmapi.SwigPyIterator_copy(self)
    def next(self): return _mmapi.SwigPyIterator_next(self)
    def __next__(self): return _mmapi.SwigPyIterator___next__(self)
    def previous(self): return _mmapi.SwigPyIterator_previous(self)
    def advance(self, *args): return _mmapi.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _mmapi.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _mmapi.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _mmapi.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _mmapi.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _mmapi.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _mmapi.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _mmapi.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectorub(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorub, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorub, name)
    __repr__ = _swig_repr
    def iterator(self): return _mmapi.vectorub_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mmapi.vectorub___nonzero__(self)
    def __bool__(self): return _mmapi.vectorub___bool__(self)
    def __len__(self): return _mmapi.vectorub___len__(self)
    def pop(self): return _mmapi.vectorub_pop(self)
    def __getslice__(self, *args): return _mmapi.vectorub___getslice__(self, *args)
    def __setslice__(self, *args): return _mmapi.vectorub___setslice__(self, *args)
    def __delslice__(self, *args): return _mmapi.vectorub___delslice__(self, *args)
    def __delitem__(self, *args): return _mmapi.vectorub___delitem__(self, *args)
    def __getitem__(self, *args): return _mmapi.vectorub___getitem__(self, *args)
    def __setitem__(self, *args): return _mmapi.vectorub___setitem__(self, *args)
    def append(self, *args): return _mmapi.vectorub_append(self, *args)
    def empty(self): return _mmapi.vectorub_empty(self)
    def size(self): return _mmapi.vectorub_size(self)
    def clear(self): return _mmapi.vectorub_clear(self)
    def swap(self, *args): return _mmapi.vectorub_swap(self, *args)
    def get_allocator(self): return _mmapi.vectorub_get_allocator(self)
    def begin(self): return _mmapi.vectorub_begin(self)
    def end(self): return _mmapi.vectorub_end(self)
    def rbegin(self): return _mmapi.vectorub_rbegin(self)
    def rend(self): return _mmapi.vectorub_rend(self)
    def pop_back(self): return _mmapi.vectorub_pop_back(self)
    def erase(self, *args): return _mmapi.vectorub_erase(self, *args)
    def __init__(self, *args): 
        this = _mmapi.new_vectorub(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mmapi.vectorub_push_back(self, *args)
    def front(self): return _mmapi.vectorub_front(self)
    def back(self): return _mmapi.vectorub_back(self)
    def assign(self, *args): return _mmapi.vectorub_assign(self, *args)
    def resize(self, *args): return _mmapi.vectorub_resize(self, *args)
    def insert(self, *args): return _mmapi.vectorub_insert(self, *args)
    def reserve(self, *args): return _mmapi.vectorub_reserve(self, *args)
    def capacity(self): return _mmapi.vectorub_capacity(self)
    __swig_destroy__ = _mmapi.delete_vectorub
    __del__ = lambda self : None;
vectorub_swigregister = _mmapi.vectorub_swigregister
vectorub_swigregister(vectorub)

class floatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mmapi.new_floatArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mmapi.delete_floatArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _mmapi.floatArray___getitem__(self, *args)
    def __setitem__(self, *args): return _mmapi.floatArray___setitem__(self, *args)
    def cast(self): return _mmapi.floatArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _mmapi.floatArray_frompointer
    if _newclass:frompointer = staticmethod(_mmapi.floatArray_frompointer)
floatArray_swigregister = _mmapi.floatArray_swigregister
floatArray_swigregister(floatArray)

def floatArray_frompointer(*args):
  return _mmapi.floatArray_frompointer(*args)
floatArray_frompointer = _mmapi.floatArray_frompointer

class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mmapi.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mmapi.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _mmapi.intArray___getitem__(self, *args)
    def __setitem__(self, *args): return _mmapi.intArray___setitem__(self, *args)
    def cast(self): return _mmapi.intArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _mmapi.intArray_frompointer
    if _newclass:frompointer = staticmethod(_mmapi.intArray_frompointer)
intArray_swigregister = _mmapi.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(*args):
  return _mmapi.intArray_frompointer(*args)
intArray_frompointer = _mmapi.intArray_frompointer

class BinarySerializer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinarySerializer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BinarySerializer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mmapi.new_BinarySerializer(*args)
        try: self.this.append(this)
        except: self.this = this
    def reserveTotal(self, *args): return _mmapi.BinarySerializer_reserveTotal(self, *args)
    def reserveAppend(self, *args): return _mmapi.BinarySerializer_reserveAppend(self, *args)
    def append(self, *args): return _mmapi.BinarySerializer_append(self, *args)
    def beginRestore(self): return _mmapi.BinarySerializer_beginRestore(self)
    def restore(self, *args): return _mmapi.BinarySerializer_restore(self, *args)
    def test_restore(self, *args): return _mmapi.BinarySerializer_test_restore(self, *args)
    def restoreBlock(self, *args): return _mmapi.BinarySerializer_restoreBlock(self, *args)
    def peekBlock(self, *args): return _mmapi.BinarySerializer_peekBlock(self, *args)
    def buffer(self, *args): return _mmapi.BinarySerializer_buffer(self, *args)
    def setBuffer(self, *args): return _mmapi.BinarySerializer_setBuffer(self, *args)
    __swig_destroy__ = _mmapi.delete_BinarySerializer
    __del__ = lambda self : None;
BinarySerializer_swigregister = _mmapi.BinarySerializer_swigregister
BinarySerializer_swigregister(BinarySerializer)

class vec3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vec3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vec3f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _mmapi.vec3f_x_set
    __swig_getmethods__["x"] = _mmapi.vec3f_x_get
    if _newclass:x = _swig_property(_mmapi.vec3f_x_get, _mmapi.vec3f_x_set)
    __swig_setmethods__["y"] = _mmapi.vec3f_y_set
    __swig_getmethods__["y"] = _mmapi.vec3f_y_get
    if _newclass:y = _swig_property(_mmapi.vec3f_y_get, _mmapi.vec3f_y_set)
    __swig_setmethods__["z"] = _mmapi.vec3f_z_set
    __swig_getmethods__["z"] = _mmapi.vec3f_z_get
    if _newclass:z = _swig_property(_mmapi.vec3f_z_get, _mmapi.vec3f_z_set)
    def __init__(self): 
        this = _mmapi.new_vec3f()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mmapi.delete_vec3f
    __del__ = lambda self : None;
vec3f_swigregister = _mmapi.vec3f_swigregister
vec3f_swigregister(vec3f)

class mat3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mat3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mat3f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _mmapi.mat3f_data_set
    __swig_getmethods__["data"] = _mmapi.mat3f_data_get
    if _newclass:data = _swig_property(_mmapi.mat3f_data_get, _mmapi.mat3f_data_set)
    def __init__(self): 
        this = _mmapi.new_mat3f()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mmapi.delete_mat3f
    __del__ = lambda self : None;
mat3f_swigregister = _mmapi.mat3f_swigregister
mat3f_swigregister(mat3f)

class frame3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, frame3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, frame3f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["origin_x"] = _mmapi.frame3f_origin_x_set
    __swig_getmethods__["origin_x"] = _mmapi.frame3f_origin_x_get
    if _newclass:origin_x = _swig_property(_mmapi.frame3f_origin_x_get, _mmapi.frame3f_origin_x_set)
    __swig_setmethods__["origin_y"] = _mmapi.frame3f_origin_y_set
    __swig_getmethods__["origin_y"] = _mmapi.frame3f_origin_y_get
    if _newclass:origin_y = _swig_property(_mmapi.frame3f_origin_y_get, _mmapi.frame3f_origin_y_set)
    __swig_setmethods__["origin_z"] = _mmapi.frame3f_origin_z_set
    __swig_getmethods__["origin_z"] = _mmapi.frame3f_origin_z_get
    if _newclass:origin_z = _swig_property(_mmapi.frame3f_origin_z_get, _mmapi.frame3f_origin_z_set)
    __swig_setmethods__["normal_x"] = _mmapi.frame3f_normal_x_set
    __swig_getmethods__["normal_x"] = _mmapi.frame3f_normal_x_get
    if _newclass:normal_x = _swig_property(_mmapi.frame3f_normal_x_get, _mmapi.frame3f_normal_x_set)
    __swig_setmethods__["normal_y"] = _mmapi.frame3f_normal_y_set
    __swig_getmethods__["normal_y"] = _mmapi.frame3f_normal_y_get
    if _newclass:normal_y = _swig_property(_mmapi.frame3f_normal_y_get, _mmapi.frame3f_normal_y_set)
    __swig_setmethods__["normal_z"] = _mmapi.frame3f_normal_z_set
    __swig_getmethods__["normal_z"] = _mmapi.frame3f_normal_z_get
    if _newclass:normal_z = _swig_property(_mmapi.frame3f_normal_z_get, _mmapi.frame3f_normal_z_set)
    __swig_setmethods__["tan1_x"] = _mmapi.frame3f_tan1_x_set
    __swig_getmethods__["tan1_x"] = _mmapi.frame3f_tan1_x_get
    if _newclass:tan1_x = _swig_property(_mmapi.frame3f_tan1_x_get, _mmapi.frame3f_tan1_x_set)
    __swig_setmethods__["tan1_y"] = _mmapi.frame3f_tan1_y_set
    __swig_getmethods__["tan1_y"] = _mmapi.frame3f_tan1_y_get
    if _newclass:tan1_y = _swig_property(_mmapi.frame3f_tan1_y_get, _mmapi.frame3f_tan1_y_set)
    __swig_setmethods__["tan1_z"] = _mmapi.frame3f_tan1_z_set
    __swig_getmethods__["tan1_z"] = _mmapi.frame3f_tan1_z_get
    if _newclass:tan1_z = _swig_property(_mmapi.frame3f_tan1_z_get, _mmapi.frame3f_tan1_z_set)
    __swig_setmethods__["tan2_x"] = _mmapi.frame3f_tan2_x_set
    __swig_getmethods__["tan2_x"] = _mmapi.frame3f_tan2_x_get
    if _newclass:tan2_x = _swig_property(_mmapi.frame3f_tan2_x_get, _mmapi.frame3f_tan2_x_set)
    __swig_setmethods__["tan2_y"] = _mmapi.frame3f_tan2_y_set
    __swig_getmethods__["tan2_y"] = _mmapi.frame3f_tan2_y_get
    if _newclass:tan2_y = _swig_property(_mmapi.frame3f_tan2_y_get, _mmapi.frame3f_tan2_y_set)
    __swig_setmethods__["tan2_z"] = _mmapi.frame3f_tan2_z_set
    __swig_getmethods__["tan2_z"] = _mmapi.frame3f_tan2_z_get
    if _newclass:tan2_z = _swig_property(_mmapi.frame3f_tan2_z_get, _mmapi.frame3f_tan2_z_set)
    def __init__(self): 
        this = _mmapi.new_frame3f()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mmapi.delete_frame3f
    __del__ = lambda self : None;
frame3f_swigregister = _mmapi.frame3f_swigregister
frame3f_swigregister(frame3f)

class fstring(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fstring, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fstring, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nSize"] = _mmapi.fstring_nSize_set
    __swig_getmethods__["nSize"] = _mmapi.fstring_nSize_get
    if _newclass:nSize = _swig_property(_mmapi.fstring_nSize_get, _mmapi.fstring_nSize_set)
    __swig_setmethods__["data"] = _mmapi.fstring_data_set
    __swig_getmethods__["data"] = _mmapi.fstring_data_get
    if _newclass:data = _swig_property(_mmapi.fstring_data_get, _mmapi.fstring_data_set)
    def __init__(self): 
        this = _mmapi.new_fstring()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mmapi.delete_fstring
    __del__ = lambda self : None;
fstring_swigregister = _mmapi.fstring_swigregister
fstring_swigregister(fstring)

class brush_stamp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, brush_stamp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, brush_stamp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _mmapi.brush_stamp_x_set
    __swig_getmethods__["x"] = _mmapi.brush_stamp_x_get
    if _newclass:x = _swig_property(_mmapi.brush_stamp_x_get, _mmapi.brush_stamp_x_set)
    __swig_setmethods__["y"] = _mmapi.brush_stamp_y_set
    __swig_getmethods__["y"] = _mmapi.brush_stamp_y_get
    if _newclass:y = _swig_property(_mmapi.brush_stamp_y_get, _mmapi.brush_stamp_y_set)
    __swig_setmethods__["z"] = _mmapi.brush_stamp_z_set
    __swig_getmethods__["z"] = _mmapi.brush_stamp_z_get
    if _newclass:z = _swig_property(_mmapi.brush_stamp_z_get, _mmapi.brush_stamp_z_set)
    __swig_setmethods__["fPressure"] = _mmapi.brush_stamp_fPressure_set
    __swig_getmethods__["fPressure"] = _mmapi.brush_stamp_fPressure_get
    if _newclass:fPressure = _swig_property(_mmapi.brush_stamp_fPressure_get, _mmapi.brush_stamp_fPressure_set)
    def __init__(self): 
        this = _mmapi.new_brush_stamp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mmapi.delete_brush_stamp
    __del__ = lambda self : None;
brush_stamp_swigregister = _mmapi.brush_stamp_swigregister
brush_stamp_swigregister(brush_stamp)

class camera_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, camera_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, camera_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["horzFOVDegrees"] = _mmapi.camera_info_horzFOVDegrees_set
    __swig_getmethods__["horzFOVDegrees"] = _mmapi.camera_info_horzFOVDegrees_get
    if _newclass:horzFOVDegrees = _swig_property(_mmapi.camera_info_horzFOVDegrees_get, _mmapi.camera_info_horzFOVDegrees_set)
    __swig_setmethods__["width"] = _mmapi.camera_info_width_set
    __swig_getmethods__["width"] = _mmapi.camera_info_width_get
    if _newclass:width = _swig_property(_mmapi.camera_info_width_get, _mmapi.camera_info_width_set)
    __swig_setmethods__["height"] = _mmapi.camera_info_height_set
    __swig_getmethods__["height"] = _mmapi.camera_info_height_get
    if _newclass:height = _swig_property(_mmapi.camera_info_height_get, _mmapi.camera_info_height_set)
    def __init__(self): 
        this = _mmapi.new_camera_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mmapi.delete_camera_info
    __del__ = lambda self : None;
camera_info_swigregister = _mmapi.camera_info_swigregister
camera_info_swigregister(camera_info)

class StoredCommands(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StoredCommands, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StoredCommands, name)
    __repr__ = _swig_repr
    MouseEventCommand = _mmapi.StoredCommands_MouseEventCommand
    CameraControlCommand = _mmapi.StoredCommands_CameraControlCommand
    ToolParameterChangeCommand = _mmapi.StoredCommands_ToolParameterChangeCommand
    BeginToolCommand = _mmapi.StoredCommands_BeginToolCommand
    CompleteToolCommand = _mmapi.StoredCommands_CompleteToolCommand
    ToolParameterCommand = _mmapi.StoredCommands_ToolParameterCommand
    SceneCommand = _mmapi.StoredCommands_SceneCommand
    SelectCommand = _mmapi.StoredCommands_SelectCommand
    BrushCommand = _mmapi.StoredCommands_BrushCommand
    PartCommand = _mmapi.StoredCommands_PartCommand
    StampCommand = _mmapi.StoredCommands_StampCommand
    SpatialQueryCommand = _mmapi.StoredCommands_SpatialQueryCommand
    def AppendMouseDownEvent(self, *args): return _mmapi.StoredCommands_AppendMouseDownEvent(self, *args)
    def AppendMouseMoveEvent(self, *args): return _mmapi.StoredCommands_AppendMouseMoveEvent(self, *args)
    def AppendMouseUpEvent(self, *args): return _mmapi.StoredCommands_AppendMouseUpEvent(self, *args)
    def CameraControl_Begin(self): return _mmapi.StoredCommands_CameraControl_Begin(self)
    def CameraControl_End(self): return _mmapi.StoredCommands_CameraControl_End(self)
    def CameraControl_EnableOrbitSnap(self): return _mmapi.StoredCommands_CameraControl_EnableOrbitSnap(self)
    def CameraControl_DisableOrbitSnap(self): return _mmapi.StoredCommands_CameraControl_DisableOrbitSnap(self)
    def CameraControl_FreeOrbit(self, *args): return _mmapi.StoredCommands_CameraControl_FreeOrbit(self, *args)
    def CameraControl_TurntableOrbit(self, *args): return _mmapi.StoredCommands_CameraControl_TurntableOrbit(self, *args)
    def CameraControl_Pan(self, *args): return _mmapi.StoredCommands_CameraControl_Pan(self, *args)
    def CameraControl_DollyZoom(self, *args): return _mmapi.StoredCommands_CameraControl_DollyZoom(self, *args)
    def CameraControl_RecenterView(self): return _mmapi.StoredCommands_CameraControl_RecenterView(self)
    def CameraControl_RecenterViewAtCursor(self): return _mmapi.StoredCommands_CameraControl_RecenterViewAtCursor(self)
    def CameraControl_SetSpecificView(self, *args): return _mmapi.StoredCommands_CameraControl_SetSpecificView(self, *args)
    def CameraControl_QueryCamera(self): return _mmapi.StoredCommands_CameraControl_QueryCamera(self)
    def CameraControl_QueryCameraResult(self, *args): return _mmapi.StoredCommands_CameraControl_QueryCameraResult(self, *args)
    def CameraControl_QueryEyeRayAtPixel(self, *args): return _mmapi.StoredCommands_CameraControl_QueryEyeRayAtPixel(self, *args)
    def CameraControl_QueryEyeRayAtPixelResult(self, *args): return _mmapi.StoredCommands_CameraControl_QueryEyeRayAtPixelResult(self, *args)
    def AppendBeginToolCommand(self, *args): return _mmapi.StoredCommands_AppendBeginToolCommand(self, *args)
    def AppendCompleteToolCommand(self, *args): return _mmapi.StoredCommands_AppendCompleteToolCommand(self, *args)
    def AppendToolParameterCommand(self, *args): return _mmapi.StoredCommands_AppendToolParameterCommand(self, *args)
    def AppendSceneCommand_Clear(self): return _mmapi.StoredCommands_AppendSceneCommand_Clear(self)
    def AppendSceneCommand_AppendMeshFile(self, *args): return _mmapi.StoredCommands_AppendSceneCommand_AppendMeshFile(self, *args)
    def GetSceneCommandResult_AppendMeshFile(self, *args): return _mmapi.StoredCommands_GetSceneCommandResult_AppendMeshFile(self, *args)
    def AppendQueryCommand_GetBoundingBox(self): return _mmapi.StoredCommands_AppendQueryCommand_GetBoundingBox(self)
    def GetQueryResult_GetBoundingBox(self, *args): return _mmapi.StoredCommands_GetQueryResult_GetBoundingBox(self, *args)
    def AppendQueryCommand_FindRayIntersection(self, *args): return _mmapi.StoredCommands_AppendQueryCommand_FindRayIntersection(self, *args)
    def GetQueryResult_FindRayIntersection(self, *args): return _mmapi.StoredCommands_GetQueryResult_FindRayIntersection(self, *args)
    def AppendQueryCommand_FindNearestPoint(self, *args): return _mmapi.StoredCommands_AppendQueryCommand_FindNearestPoint(self, *args)
    def GetQueryResult_FindNearestPoint(self, *args): return _mmapi.StoredCommands_GetQueryResult_FindNearestPoint(self, *args)
    def AppendSelectCommand_All(self): return _mmapi.StoredCommands_AppendSelectCommand_All(self)
    def AppendSelectCommand_NearestComponent(self, *args): return _mmapi.StoredCommands_AppendSelectCommand_NearestComponent(self, *args)
    def AppendSelectCommand_ContainingComponent(self, *args): return _mmapi.StoredCommands_AppendSelectCommand_ContainingComponent(self, *args)
    def AppendSelectCommand_FirstComponentIntersectingRay(self, *args): return _mmapi.StoredCommands_AppendSelectCommand_FirstComponentIntersectingRay(self, *args)
    def AppendSelectCommand_AllComponentsIntersectingRay(self, *args): return _mmapi.StoredCommands_AppendSelectCommand_AllComponentsIntersectingRay(self, *args)
    def AppendSelectCommand_InsideSphere(self, *args): return _mmapi.StoredCommands_AppendSelectCommand_InsideSphere(self, *args)
    def GetSelectCommandResult_InsideSphere(self, *args): return _mmapi.StoredCommands_GetSelectCommandResult_InsideSphere(self, *args)
    def AppendSelectCommand_ByFaceGroups(self, *args): return _mmapi.StoredCommands_AppendSelectCommand_ByFaceGroups(self, *args)
    def GetSelectCommandResult_ByFaceGroups(self, *args): return _mmapi.StoredCommands_GetSelectCommandResult_ByFaceGroups(self, *args)
    def AppendActionCommand_BrushStroke3D(self, *args): return _mmapi.StoredCommands_AppendActionCommand_BrushStroke3D(self, *args)
    def AppendActionCommand_DropPartAtPoint(self, *args): return _mmapi.StoredCommands_AppendActionCommand_DropPartAtPoint(self, *args)
    def AppendActionCommand_UpdateDropPart(self, *args): return _mmapi.StoredCommands_AppendActionCommand_UpdateDropPart(self, *args)
    def AppendActionCommand_AcceptDropPart(self): return _mmapi.StoredCommands_AppendActionCommand_AcceptDropPart(self)
    def GetActionCommandResult_DropPart(self, *args): return _mmapi.StoredCommands_GetActionCommandResult_DropPart(self, *args)
    def AppendActionCommand_InsertPolygon(self, *args): return _mmapi.StoredCommands_AppendActionCommand_InsertPolygon(self, *args)
    def GetActionCommandResult_InsertPolygon(self, *args): return _mmapi.StoredCommands_GetActionCommandResult_InsertPolygon(self, *args)
    def Store(self, *args): return _mmapi.StoredCommands_Store(self, *args)
    def Restore(self, *args): return _mmapi.StoredCommands_Restore(self, *args)
    def Execute(self, *args): return _mmapi.StoredCommands_Execute(self, *args)
    def Store_Results(self, *args): return _mmapi.StoredCommands_Store_Results(self, *args)
    def Restore_Results(self, *args): return _mmapi.StoredCommands_Restore_Results(self, *args)
    def Store_Internal(self): return _mmapi.StoredCommands_Store_Internal(self)
    def Store_GetSize(self): return _mmapi.StoredCommands_Store_GetSize(self)
    def Store_GetBuffer(self, *args): return _mmapi.StoredCommands_Store_GetBuffer(self, *args)
    def __init__(self): 
        this = _mmapi.new_StoredCommands()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mmapi.delete_StoredCommands
    __del__ = lambda self : None;
StoredCommands_swigregister = _mmapi.StoredCommands_swigregister
StoredCommands_swigregister(StoredCommands)

# This file is compatible with both classic and new-style classes.


